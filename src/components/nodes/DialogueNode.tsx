import React, { memo, useState } from 'react'
import { Handle, NodeProps, Position, XYPosition } from 'reactflow'
import { v4 as uuidv4 } from 'uuid'
import Button from '@/components/Button/Button'
import useStore from '@/store/store'
import { types } from '@/store/reducer'
// import Detail from '@/components/page/detail/NodeDetail'

// this is a temporary class - eventually we'll need events too I assume
export class DialogueNode {
	private static last_id: number = 1

	id: string

	sourcePosition: Position
	targetPosition: Position

	isConnectable = true

	// private _character_name: string = ''

	// get character_name() {
	// 	return this._character_name
	// }

	// set character_name(value: string) {
	// 	this._character_name = value
	// }

	// _dialogue: string = ''

	// get dialogue() {
	// 	return this._dialogue
	// }

	// set dialogue(value: string) {
	// 	this._dialogue = value
	// }

	type: string = 'dialogue'

	// data is generated by the character name and dialogue option
	data:
		| {
				/* characterName: string; dialogue: string; */ id: string
				type: string
		  }
		// position is based on the x and y variables
		// this could probably be surfaced as an object instead of this read only thing
		// but who's to say
		| undefined

	// position is based on the x and y variables
	// this could probably be surfaced as an object instead of this read only thing
	// but who's to say
	position: XYPosition

	// ctor
	constructor(
		character_name: string,
		dialogue: string,
		// edit: Function,
		id: string | null,
		x: number,
		y: number,
		TB?: boolean
	) {
		// this.character_name = character_name
		// this.dialogue = dialogue
		this.id = id || uuidv4()
		this.position = { x, y }
		if (TB) {
			this.sourcePosition = Position.Bottom
			this.targetPosition = Position.Top
		} else {
			this.sourcePosition = Position.Right
			this.targetPosition = Position.Left
		}
		this._set_data()
	}

	private _set_data() {
		this.data = {
			// characterName: this.character_name,
			// dialogue: this.dialogue,
			id: this.id,
			type: 'dialogue',
		}
	}
}

export default ({
	data,
	isConnectable,
	sourcePosition = Position.Right,
	targetPosition = Position.Left,
}: NodeProps<{ characterName: string; dialogue: string; id: string }>) => {
	const dispatch = useStore((store) => store.dispatch)
	const updateDialogueData = useStore((state) => state.updateDialogueData)

	return (
		<>
			<Handle
				type="target"
				position={targetPosition}
				style={{ background: '#555' }}
				onConnect={(params) => console.log('handle onConnect', params)}
				isConnectable={isConnectable}
			/>
			<h2>{data.characterName}</h2>
			<p>{data.dialogue}</p>
			<button className="btn-primary"
				onClick={() => dispatch({ type: types.setNode, data: data.id })}
			>
				Edit
			</button>
			<Handle
				type="source"
				position={sourcePosition}
				style={{ background: '#555' }}
				isConnectable={isConnectable}
			/>
		</>
	)
}
